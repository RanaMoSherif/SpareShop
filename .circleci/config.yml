version: 2.1

parameters:
  dotnet_version: 
    default: "7.0"
    type: string
  repo_service_name: 
    default: "dev-testci-service"
    type: string
  aws_cluster: 
    default: "revamp-stg-cluster"
    type: string
  aws_context: 
    default: "aws-dev"
    type: string

jobs:
  build-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:<< pipeline.parameters.dotnet_version >>
    resource_class: small
    steps:
      - checkout
      - run:
          name: build
          command: |
            SLN_FILE=$(find . -name "*.sln")
            echo "Found solution file: $SLN_FILE"
            dotnet restore $SLN_FILE
            dotnet build

  test-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:<< pipeline.parameters.dotnet_version >>  # Use the dotnet_version parameter here
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install sonarscanner 
          command: |
            apt-get update && apt-get install -y openjdk-17-jdk-headless
            set JAVA_HOME /usr/lib/jvm/java-17-openjdk-amd64/
            export JAVA_HOME
            dotnet tool install --global dotnet-sonarscanner
            echo 'export PATH="$PATH:/root/.dotnet/tools"' >> $BASH_ENV
      - run:
          name: Run sonarscanner
          command: |
            SLN_FILE=$(find . -name "*.sln")
            echo "Found solution file: $SLN_FILE"
            dotnet restore $SLN_FILE
            dotnet sonarscanner begin /k:<< pipeline.parameters.repo_service_name >> /o:$SONAR_ORG /d:sonar.token=$SONAR_TOKEN /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths="**\coverage*.opencover.xml" /d:sonar.coverage.exclusions="**test*/*.cs,**Tests*.cs,**Mock*.cs" 
            dotnet build
            dotnet test --no-restore --no-build --verbosity normal -f net<< pipeline.parameters.dotnet_version >> --logger "trx;LogFileName=TestResults.trx" --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover $SLN_FILE
            dotnet sonarscanner end /d:sonar.token=$SONAR_TOKEN
      - run:
          name: Convert TRX to JUnit to show in CircleCI tests
          command: |
              dotnet tool install --global trx2junit
              TEST_RESULT_TRX=$(find . -name "TestResults.trx")
              trx2junit $TEST_RESULT_TRX --output ./
      - store_test_results:
          path: ./TestResults.xml
      - store_artifacts:
          path: ./TestResults.xml

orbs:
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-ecr: circleci/aws-ecr@8.1.3

workflows:
  dotnet-pipeline-flow:
    jobs:
      - build-dotnet
      - test-dotnet:
          context: SonarCloud
          requires:
            - build-dotnet
      - aws-ecr/build-and-push-image:
          context: << pipeline.parameters.aws_context >>
          create-repo: false
          dockerfile: Dockerfile
          path: .
          repo: << pipeline.parameters.repo_service_name >>
          tag: "$(date +\"%Y.%m.%d\")-$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)"
          requires:
            - test-dotnet
      - aws-ecs/deploy-service-update:
          context: << pipeline.parameters.aws_context >>
          family: << pipeline.parameters.repo_service_name >>
          cluster: << pipeline.parameters.aws_cluster >> 
          container-image-name-updates: "container=<< pipeline.parameters.repo_service_name >>,tag=$(date +\"%Y.%m.%d\")-$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)"
          requires:
            - aws-ecr/build-and-push-image