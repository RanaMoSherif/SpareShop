version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@1.1.0

jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install unzip & Java
          command: | 
            apt-get update && apt-get install -y unzip openjdk-17-jdk
            set JAVA_HOME /usr/lib/jvm/java-17-openjdk-amd64/
            mkdir -p /usr/share/man/man1
            export JAVA_HOME
      - run:
          name: Find .sln file and run dotnet restore
          command: |
            SLN_FILE=$(find . -name "*.sln")
            echo "Found solution file: $SLN_FILE"
            dotnet restore $SLN_FILE
      - run:
          name: Find .sln file and run dotnet publish
          command: |
            SLN_FILE=$(find . -name "*.sln")
            dotnet publish $SLN_FILE -c Release -o out
      - run:
          name: Install dotnet-sonarscanner
          command: |
            dotnet tool install --global dotnet-sonarscanner --version 5.11.0
            echo 'export PATH="$PATH:/root/.dotnet/tools"' >> $BASH_ENV
      - run:
          name: Run sonarscanner
          command: |
            SLN_FILE=$(find . -name "*.sln")
            echo "Found solution file: $SLN_FILE"
            dotnet sonarscanner begin /k:RanaMoSherif_SpareShop /o:ranamosherif /d:sonar.token=${SONAR_TOKEN} /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths="**\coverage*.opencover.xml" /d:sonar.coverage.exclusions="**test*/*.cs,**Tests*.cs,**Mock*.cs"
            dotnet build
            # dotnet test --no-restore --no-build --verbosity normal -f net6.0 --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover test/TESTPROJECT.csproj
            dotnet sonarscanner end /d:sonar.token=${SONAR_TOKEN}

  build-docker:
    docker:
      - image: docker:20.10.7
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t spareshop:latest .
      - run:
          name: Save Docker Image
          command: |
            mkdir -p docker-cache
            docker save -o docker-cache/spareshop.tar spareshop:latest
      - persist_to_workspace:
          root: .
          paths:
            - docker-cache
  # test:
  #   docker:
  #     - image: docker:20.10.7
  #   steps:
  #     - attach_workspace:
  #         at: /workspace
  #     - setup_remote_docker
  #     - run:
  #         name: Load Docker Image
  #         command: |
  #           docker load -i /workspace/docker-cache/spareshop.tar
  #     - run:
  #         name: Test
  #         command: |
  #           docker run --rm -v "$(pwd):/app" spareshop:latest dotnet test

  deploy:
    docker:
      - image: docker:20.10.7
    steps:
      - attach_workspace:
          at: /workspace
      - setup_remote_docker
      - run:
          name: Load Docker Image
          command: |
            docker load -i /workspace/docker-cache/spareshop.tar
      - run:
          name: Deploy
          command: |
            # Your deployment script here

  tag-and-push:
    docker:
      - image: cimg/base:2023.08
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Load Docker Image
          command: |
            docker load -i docker-cache/spareshop.tar
      - run:
          name: Login to GHCR
          command: |
            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin
      - run:
          name: Tag and Push Docker Image
          command: |
            CALVER_TAG="$(date +"%Y.%m.%d")-$(echo "${CIRCLE_BRANCH}" | tr '/' '-')"
            docker tag spareshop:latest ghcr.io/${GHCR_USERNAME}/spareshop:${CALVER_TAG}
            docker push ghcr.io/${GHCR_USERNAME}/spareshop:${CALVER_TAG}
      - run:
          name: Tag Git Repository
          command: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            git tag "${CALVER_TAG}"
            git push origin "${CALVER_TAG}"

workflows:
  build-test-deploy:
    jobs:
      - build
      - build-docker
      # - test:
      #     requires:
      #       - build
      - tag-and-push:
          requires:
            - build-docker
      - deploy:
          requires:
            - tag-and-push
