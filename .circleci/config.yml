version: 2.1

parameters:
  sln_file:
    default: "."
    type: string
  sonarcloud_project_key: 
    default: "RanaMoSherif_SpareShop"
    type: string
  sonarcloud_organization: 
    default: "ranamosherif"
    type: string
  sonarcloud_login: 
    default: "fa31d45ec468d62a8bbaa122137e83fb1621ba9f"
    type: string
  dotnet_version: 
    default: "7.0"
    type: string
  repo: 
    default: "dev-testci-service"
    type: string
  family: 
    default: "dev-testci-service"
    type: string
  cluster: 
    default: "revamp-stg-cluster"
    type: string
  container_image_name_updates: 
    default: "container=dev-testci-service,tag=$(date +\"%Y.%m.%d\")-$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)"
    type: string

jobs:
  build-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:<< pipeline.parameters.dotnet_version >>
    resource_class: small
    steps:
      - checkout
      - run:
          name: build
          command: |
            SLN_FILE=$(find . -name "*.sln")
            echo "Found solution file: $SLN_FILE"
            dotnet restore $SLN_FILE
            dotnet build

  test-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:<< pipeline.parameters.dotnet_version >>  # Use the dotnet_version parameter here
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install sonarscanner 
          command: |
            apt-get update && apt-get install -y openjdk-17-jdk-headless
            set JAVA_HOME /usr/lib/jvm/java-17-openjdk-amd64/
            export JAVA_HOME
            dotnet tool install --global dotnet-sonarscanner --version 5.11.0
            echo 'export PATH="$PATH:/root/.dotnet/tools"' >> $BASH_ENV
      - run:
          name: Run sonarscanner
          command: |
            SLN_FILE=$(find . -name "*.sln")
            echo "Found solution file: $SLN_FILE"
            dotnet restore $SLN_FILE
            dotnet sonarscanner begin /k:$sonarcloud_project_key /o:$sonarcloud_organization /d:sonar.login=$sonarcloud_login /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths="**\coverage*.opencover.xml" /d:sonar.coverage.exclusions="**test*/*.cs,**Tests*.cs,**Mock*.cs" 
            dotnet build
            dotnet test --no-restore --no-build --verbosity normal -f net$<< pipeline.parameters.dotnet_version >> --logger "trx;LogFileName=TestResults.trx" --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover Tests/BestAutoUnitTesting/BestAutoUnitTesting.csproj
            dotnet sonarscanner end /d:sonar.login=$sonarcloud_login
      - run:
          name: Convert TRX to JUnit to show in CircleCI tests
          command: |
              dotnet tool install --global trx2junit
              trx2junit /root/project/Tests/BestAutoUnitTesting/TestResults/TestResults.trx
      - store_test_results:
          path: /root/project/Tests/BestAutoUnitTesting/TestResults/TestResults.xml
      - store_artifacts:
          path: /root/project/Tests/BestAutoUnitTesting/TestResults/TestResults.xml

orbs:
  aws-ecs: circleci/aws-ecs@3.2.0
  aws-ecr: circleci/aws-ecr@8.1.3

workflows:
  dotnet-pipeline-flow:
    jobs:
      - build-dotnet
      - test-dotnet:
          requires:
            - build-dotnet
      - aws-ecr/build-and-push-image:
          context: aws-dev
          create-repo: false
          dockerfile: Dockerfile
          path: .
          repo: << pipeline.parameters.repo >>
          tag: << pipeline.parameters.container_image_name_updates >>
          requires:
            - test-dotnet
      - aws-ecs/deploy-service-update:
          context: aws-dev
          family: << pipeline.parameters.family >>
          cluster: << pipeline.parameters.cluster >> 
          container-image-name-updates: << pipeline.parameters.container_image_name_updates >>
          requires:
            - aws-ecr/build-and-push-image
